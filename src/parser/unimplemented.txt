
  // export type Location = {
  //   readonly x: number;
  //   readonly y: number;
  // }
  // export const locate = (x = 0, y = 0) => ({x, y} as Location);

  export const Struct = ({format = (s: json.Value) => String(s ?? ""), parse = (s: string) => s as json.Value, header = undefined as unknown as string[]}) => {
    let table = [] as json.Pair[];
    const h = header??[];
    let row = 0 as any;

    const isHeader = (obj: json.Pair) => {
      for (const k in obj) {
        if(k !== obj[k]) return false;
      }
      return true;
    }

    /**
     * Joins the argument array using the syntax for nested arrays and object
     * @param p 
     * @param s 
     * @returns 
     */
    const weldPath = (p: (number | string)[], s: Syntax) => {
      let k = "";
      for (const e of p) {
        k += typeof e === "number" ? (s.nap??"") : (s.nop??"");
        k += e;
      }
      return k;
    }

    const readjust: (f: string) => void = f => {
      // table.forEach(x => x[f] = null as any);
      for (let i = 0; i < table.length; i++) {
        if(table[i][f] === undefined) table[i][f] = null as any;
      }
    }

    //true means an assignment was completed. Assignment may not be completed if the path of header provider is
    //shorter than the object. In this case, a cache will be reserved and when the cache is ready, the result
    // will be stringified 
    const ah: (d: json.Value, s: Syntax, n: string, t?: string[]) => boolean = (d, s, n, t) => {//apply header
      if(typeof t === "undefined"){
        const a = [] as string[];
        split(n, s, a);
        return ah(d, s, n, t);
      } else if(t.length === 0) {
        if(json.isAtomic(d)) {
          if(!table[row]) table[row] = {};
          table[row][n] = d;
          return true;
        }
        if(!table[row]) table[row] = {};
        table[row][n] = "";
        return false;
      }
      const nm = fixFieldName(t.shift()!, s);
      d = d ? d : typeof nm === "string" ? {} : [];
      return ah((d as any)[nm], s, n, t);
    }

    const rec: (d: (string|number)[], v?: json.Value) => json.Value = (d, v) => {
      if(d.length === 0) {
        return v!;
      }
      const n = d.shift()!;
      const val = typeof n === "string" ? {} : [];
      v = v ? (v as any)[n] = val : val;
      return rec(d, v);
    }

    /**
     * Populates the table with a stream of array values. This method is meant to be called repeatedly in a writer or stream
     * for objects. The data is either an atomic value as defined by `json.isAtomic` or an array stating the path traversed to
     * the atomic value. For example: `[0, "key", null]` translates to `[{key: null}]`. Every array index traversed will store
     * that location (index) as a number and every property traversed will also store that location (key) as string.
     * @param data an tomic value or an array of number or string with the actual payload at the last index
     * @param s 
     * @param p 
     */
    const consume = (data: json.Value, s: Syntax, p: Params) => {
      if(json.isAtomic(data)){
        if(!header) {
          h.push(typeof data === "string" ? data : data === null ? "" : JSON.stringify(data));
          table[row][h[0]] = 0;
        } else if(h.length === 1){
          table[row][h[0]] = (typeof data === "string" ? data : data === null ? "" : JSON.stringify(data))
        } else throw Error("unsupported data type", {cause: {header: h, data}});
      } else if(Array.isArray(data)){
        if(data[0] !== row) {//new row
          row = data[0];
        }
        // if(typeof data[0] === "number") {//An array
        if(!header){//headerless, hence infer from data
          const value = data.pop();
          //Arrays in the form Object[] will only have their
          //element extracted. Their indexes will not be included
          if(data.length > 1 && typeof data[1] === "string"){
            data.shift();
          }
          const k = weldPath(data as (number | string)[], s);
          if(h.indexOf(k) < 0) {
            h.splice(row, 0, k);
            readjust(k);
          }
          if(!table[row]) table[row] = {};
          table[row][k] = value!
        } else {//has header, apply it to the data
          // const rv = ah(data, s, h[row]);
          ah(rec(data as any), s, h[row]);//recompose the data and apply header
        }
        // } else if(typeof data[0] === "string") {//an object
        //   if(!header) {
        //   } else {
        //   }
        // }
      } else throw Error("unsupported data type", {cause: {header: h, data}});
    }

    const swapRow = (x = 0, y = 1) => {
      const xv = table[x];
      table[x] = table[y];
      table[y] = xv;
    }
    const srow = swapRow;
    const swapCol = (x = 0, y = 1) => {
      const xv = h[x];
      h[x] = h[y];
      h[y] = xv;
    }
    const scol = swapCol;
    const swapCell = (x0 = 0, y0 = 0, x1 = 0, y1 = 0) => {
      const $0 = table[x0][h[y0]];
      table[x0][h[y0]] = table[x1][h[y1]];
      table[x1][h[y1]] = $0;
    }
    const swapCell2 = (row0: number, col0: string, row1: number, col1: string) => {
      const $0 = table[row0][col0];
      table[row0][col0] = table[row1][col1];
      table[row1][col1] = $0;
    }
    const scell = (r0: number, c0: number | string, r1: number, c1: number | string) => {
      return (typeof c0 === "number" && typeof c1 === "number" ? swapCell(r0, c0, r1, c1) : swapCell2(r0, c0 as string, r1, c1 as string))
    }
    const swap = ({x0 = 0, y0 = 0 as number | string, x1 = undefined as any as number, y1 = undefined as any as number | string, type = true}) => {
      type = !!type;
      if(x1 === undefined && y1 === undefined){
        if(type) return srow(x0, y0 as number);
        else return scol(x0, y0 as number);
      }
      return scell(x0, y0, x1, y1);
    }

    const tf = () => {
      const t = [] as typeof table;
      const d = {} as any;
      for (let row = 0; row < table.length; row++) {
        for (const k in table[row]) {
          if(d[k] === undefined) d[k] = [];
          d[k].push(table[row][k]);
        }
      }
    }
    const tb = () => {
      const t = [] as typeof table;
      const d = {} as any;
      for (let row = table.length - 1; row >= 0; row--) {
        for (const k in table[row]) {
          if(d[k] === undefined) d[k] = [];
          d[k].unshift(table[row][k]);
        }
      }
    }
    const transpose = (forward = true) => {
      if(forward === true) return tf();
      else if(forward === false) return tb();
    }

    const flip = () => {
      const l = Math.floor(table.length / 2);
      for (let i = 0; i < l; i++) {
        swapRow(i, table.length - i);
      }
    }

    const rows = function*() {
      let r = 0;
      while(r < table.length){
        yield table[r];
        r++;
      }
    }
    const rw = (index = 0) => table[index];

    const columns = function*() {
      for (let i = 0; i < h.length; i++) {
        const col = [] as string[];
        table.forEach(r => {
          col.push(r[h[i]] as string);
        });
        yield col;
      }
    }
    const column = (index = 0) => {
      const col = [] as string[];
      table.forEach(r => {
        col.push(r[h[index]] as string);
      });
      return col;
    }
    const cells = function*() {
      for (let i = 0; i < h.length; i++) {
        yield h[i];
      }
      for (let row = 0; row < table.length; row++) {
        for (const col in table[row]) {
          yield table[row][col];
        }
      }
    }
    const cell = (row = 0, col = 0) => {
      return table[row][col];
    }
    const setR = (r: number, data: json.Pair) => {
      if(Object.keys(data) === h) table[r] = data;
    }
    const setC = (n: string | number, data: string[]) => {
      if(typeof n === "number")
      table.forEach((x, i) => {
        x[h[n]] = data[i];
      });
      else table.forEach((x, i) => {
        x[n] = data[i];
      });
    }
    const setCell = (r = 0, c = 0 as number | string, v: string) => {
      if(typeof c === "number") table[r][h[c]] = v;
      else table[r][c] = v;
    }
    const set = ({x = 0, y = undefined, type = true, data}: {x?: number,y?: number, type?:boolean,data:json.Value}) => {
      type = !!type;
      if(y === undefined){
        if(type) return setR(x, data as json.Pair);
        else return setC(x, data as string[]);
      }
      return setCell(x, y, data as string);
    }
    const getR = (r: number) => table[r];
    const getC = (n: string | number) => {
      const d = [] as string[];
      if(typeof n === "number"){
        table.forEach((x, i) => {
          d.push(x[h[n]] as any);
        });
        return d;
      }
      table.forEach((x, i) => {
        d.push(x[n] as any);
      });
      return d;
    }
    const getCell = (r = 0, c = 0 as number | string) => {
      if(typeof c === "number") return table[r][h[c]];
      return table[r][c];
    }
    const get = ({x = 0, y = undefined, type = true}: {x?: number,y?: number, type?:boolean}) => {
      type = !!type;
      if(y === undefined){
        if(type) return getR(x);
        else return getC(x);
      }
      return getCell(x, y);
    }

    return {consume, table, rowNum: row,/*merge, */transpose, flip, swap, header: h, isReadonly: false, rows, row: rw, columns, column, cells, cell, set, get, parse, format};
  };
  